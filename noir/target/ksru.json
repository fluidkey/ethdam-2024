{"noir_version":"0.26.0+c46b164ce56e6a8f81255fb17eb6539bd040f336","hash":17275178602450254608,"abi":{"parameters":[{"name":"hashed_message","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"pub_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pub_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"signature","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"stealth_secret","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"ks_index","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"stealth_init","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"}],"param_witnesses":{"hashed_message":[{"start":0,"end":32}],"ks_index":[{"start":192,"end":224}],"pub_key_x":[{"start":32,"end":64}],"pub_key_y":[{"start":64,"end":96}],"signature":[{"start":96,"end":160}],"stealth_init":[{"start":224,"end":256}],"stealth_secret":[{"start":160,"end":192}]},"return_type":null,"return_witnesses":[]},"bytecode":"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","debug_symbols":"nd3BaiRHEEXRf+m1MBXvZWZk6leMF/JYBoHQDCPZYIT+3T3Y6o2qphV3p6Z5m45LQZ2NXk+PX7/cvTx8fXo+3b6e1Mfp9tfX0/O3u6cfn59f7r6/nG4z4uZ0//TH+a81325Ofz483p9uW779dnOe5N5kXiZT48Nk7k1W8/+TNdeHySpPxlafRH2i+sT1SatPen0y6pOsT+rXH/XrZ/36Wb9+1q+f9etn/fpZv37Wr5/162f9+lm//qxff9avP+vXn/Xrz/r1Z/36s379Wb/+rF9/1q+/6tdf9euv+vVX/fqrfv1Vv/6qX3/Vr7/q11/l63vb6pOoT1SfuD5p9UmvT0Z9kvXJrE/q14/69aN+/ahfP+rXj/r1o379qF8/6teP+vWjfn3Vr6/69VW/vvavL71PVvswafVJ//kkttg+bAbYJNhMsFn1jTewCbAR2BhsGtiADgw6MOjAoAODDhrooIEOGuiggQ4a6KCBDhrooIEOGuiggQ466KCDDjrooIMOOuiggw56vYMz7P2y/x4Z6v19d0bGvV3C3YS7xXb775af2AXcCe4Mdw3uOtzBXhbsZcFeFuwlto0Ogw5Fh6bDRoedDgcdJh1OOqTlBC0naDlBywlaTtBygpYTtJyg5QQtJ2g5ouWIliNajmg5ouWIliNajmg5ouWIlmNajmk5puWYlmNajmk5puWYlmNajmk5jZbTaDmNltNoOY2W02g5jZbTaDmNltNoOZ2W02k5nZbTaTmdltNpOZ2W02k5nZbTaTmDljNoOYOWM2g5g5YzaDmDljNoOYOWM2g5SctJWk7ScpKWk7ScpOUkLSdpOUnLSVrOpOVMWs6k5UxazqTlTFoOZeOgbhwUjoPKcVA6DmrHQfE4qB4H5eOgfhwUkIMKclBCDmrIooYsasiihixqyKKGLGrIooYsasiihixqyKKGLGrIooYsasiihixqyKKGLGrIooYsasiihixqyKKGLGrIooYsasiihixqyKKGLGrIooYsasiihixqyKKGLGrIooYsasiihixqyKKGLGrIooYsasiihixqyKKGLGrIooYsasiihixqyKKGLGrIooYsasiihixqyKKGLGrIooYsasiihixqyKKGLGrIooYsasiihixqyKKGLGrIooYsasiihixqyKKGLGrIooYsasiihixqyKKGLGrIooYsasiihixqyKKGLGrIooYsasiihixqyKKGLGrIooYsasiihixqyKaGbGrIpoZsasimhmxqyKaGbGrIpoZsasimhmxqyKaGbGrIpoZsasimhmxqyKaGbGrIpoZsasimhmxqyKaGbGrIpoZsasimhmxqyKaGbGrIpoZsasimhmxqyKaGbGrIpoZsasimhmxqyKaGbGrIpoZsasimhmxqyKaGbGrIpoZsasimhmxqyKaGbGrIPoLZXJfhjL3hEcxeH+63en7Cvw/Pj97dYcLhgQSeU7wMe98dBh2KDk2HDQ4PsOv6r3qAXZ8Yig5Nh40OO/1VBx0mHU46XHB4gF3nR8plOHafOQfY9Ymh6NB02Oiw0yEtZ9FyFi1nwXLattFh0KHo0HTY6LDT4aDDpMNJh7ScoOUELSdoOUHLCVpO0HKClhO0nKDlBC1HtBzRckTLES1HtBzRckTLES1HtBzRckzLMS3HtBzTckzLOaKna6+B7Yierg/hG2trGx0GHR7ccYvLr7rN3aHpsNFhp8NBh0mHB+WscTnHyt3hgsMjero+DDoUHZoOGx12Ohx0mHRIy+m0nEHLGbScQcsZtJxByxm0nEHLGbScQcsZtJyk5SQtJ2k5SctJWk7ScpKWk7ScpOUkLWfSciYtZ9JyJi1n0nImLWeWyzl/+Pvu+8Pd74/3z+fJj+/+evry/t+czh9f/vn23zdv/wI=","file_map":{"47":{"source":"use dep::std;\n\n/**\n*   @param hashed_message - the hashed message that is signed\n*   @param pub_key_x - x vector of the public key connected to the account that signed\n*   @param pub_key_y - y vector of the public key connected to the account that signed\n*   @param signature - the signature of the hashed_message\n*   @param stealth_secret_with_ks_index - the contact of stealth_secret with ks_index\n*   @param stealth_init - the hashed used to init the stealth account\n**/\nfn main(\n    hashed_message: pub [u8; 32], pub_key_x: [u8; 32], pub_key_y: [u8; 32], signature: [u8; 64],\n    stealth_secret: [u8; 32], ks_index: [u8; 32], stealth_init: pub [u8; 32]\n) {\n    // verify signature\n    let valid_signature = std::ecdsa_secp256k1::verify_signature(pub_key_x, pub_key_y, signature, hashed_message);\n    assert(valid_signature);\n\n    // verify that the stealth_init is obtained from ks_index and stealth_secret\n    assert(std::hash::keccak256(concat_uint256_array(stealth_secret, ks_index), 64) == stealth_init);\n\n    // verify that from publick_key + index we get up to root following the path\n}\n\n// concat 2 keccak256 into a one u512 value\nunconstrained fn concat_uint256_array(arr1: [u8; 32], arr2: [u8; 32]) -> [u8; 64] {\n    let mut out: [u8; 64] = [0; 64];\n    for i in 0..32 {\n        out[i] = arr1[i];\n    }\n    for i in 0..32 {\n        out[32 + i] = arr2[i];\n    }\n    out\n}\n\nfn verifyTransaction() {\n    // public input parameters are\n    // * keystore root hash\n    // * paths to root hash\n    // private input parameters are\n    // * public key (array) - for us 1 key is enough (no need of array)\n    // * signature\n    // * hash of data signed\n    // what the code has to do\n    // * verify the validity of signature\n    // * check validity of the path to roothash from public key\n}","path":"/home/tony/Documents/repos/Fluidkey/zk/ethdam-2024/noir/src/main.nr"}}}