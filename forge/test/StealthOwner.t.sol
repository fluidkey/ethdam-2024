// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {StealthOwner} from "../src/StealthOwner/StealthOwner.sol";
import "../src/Keystore.sol";
import "../src/Verifier.sol";

contract StealthOwnerTest is Test {
    StealthOwner public stealthOwner;
    Keystore public keystore;
    UltraVerifier public verifier;

    function setUp() public {
        keystore = new Keystore(bytes32(0x9d1e47d5cfc1e13496cc0ad15235629fe73dab58e565eabfe4eb0a89bc6b9803));
        verifier = new UltraVerifier();
        stealthOwner = new StealthOwner(
            bytes32(0x6196b502ff84507397f9a0280bf6c6f2ea553dafdd2e576735dfd3c34b746986),
            address(verifier),
            address(keystore)
        );

        // register also one key
        bytes32[6] memory initialProofs = [
                            bytes32(0x9eaccf3d397656f4ad37ea817192d14e40d856dd43a2bac16421700ddf613a07),
                            bytes32(0x8e0bc5bf767ff329ab20af0bf4e749fe21e79b3d58a0d25c0312e8f6819405bf),
                            bytes32(0x34696f0ef337c20f55921f5e23ae081fca3b7d0ffd52aa2521363771b6eb1475),
                            bytes32(0x9ee25ee9185269701f752702c001ed3b1f0bad3c50120afc41fa197cd3f902c0),
                            bytes32(0x6ba91e3b0c008c5a001dc344c1a1458eea897b9258734931cf204c975642482e),
                            bytes32(0x98ab828cfe1af8a4a01cdcaeea7e8332b3b25eec386ea7a9d3680c64dd54d815)
            ];
        uint8[6] memory proofPosition = [1,1,1,1,1,1];
        (bytes32 newHash, bytes32 rootHash) = keystore.addKey(
            initialProofs,
            proofPosition,
            bytes32(0xd07902618ebcddf72757caeaa3856c3f84207fc70993c252a4b4a0a9b6e8fa0e),
            bytes32(0xd17ad691459a0b570a2ac9a039a56a74dd0c5597b11b793b17991b123db576ad)
        );
    }

    function test_splitBytes32() public view {
        bytes32[] memory result = stealthOwner.splitBytes32(bytes32(0x0eb5be412f275a18f6e4d622aee4ff40b21467c926224771b782d4c095d1444b));
        assertTrue(result[0] == bytes32(0x000000000000000000000000000000000000000000000000000000000000000e), "splitBytes32 failed");
        assertTrue(result[1] == bytes32(0x00000000000000000000000000000000000000000000000000000000000000b5), "splitBytes32 failed");
        assertTrue(result[31] == bytes32(0x000000000000000000000000000000000000000000000000000000000000004b), "splitBytes32 failed");
    }

    function test_verifyTransaction() public view {
        bytes32 _hash = bytes32(0xa19edf3738319a862163d1f1491d6bdc9b4a9b40ab9e69eb7bdceb73ee048e68);
        bytes memory _zkProof = hex"244597fcdf1ba34f5cd97389c8c6e2c0e563579e3508419bad0b501d6c878c2921ed9e94cc95dc534dcd0760780e56b3afda874fcfd26762ea6b7ed2f1a2f45620f1779cbf764b9306f7861dff8a809f1f23981334043f56a252c5983832adaf118a201079a4913b74f540f93b9e07d91352889bc14b486695b26fc2f2dc544d196b01c889266116b2856454318d1881ea2a9a8d93debd7e056124d310a52af7153db9abbf232e9ba7e44c2acda70012ee48cccf5ac30b27e76411272370838b026f19b499752f5b4b91d23faafee91d645f43d6dc642f715cba70963fa8db961d03984c49300bd2a9ccfff6a9fc61e420be781ac8cbe4bbd11b91d9b13b36091faf6a539e37335dd664a28bec2f48cc561d199e9765deee6c38d817082ba36a2ae6c32526dd6ac70f3f524abfb6059a94fdb70099c30955c3e6c073b75b958515f35a1422311239dd9fa7b56fec2c40a3e0187a8ad70351656c12a5a0f9c5251403209dc757a3ec3b852070db6156d9293ebd21e382f43ec6bb2e16962973e0248479eedfd805f4e9af29e9c17a22924d96ab99b9fa140542d168b31e1e10842bd679a0f6efaa404a9a0e83d6bb5f678461c2f3486b07aa267312f5fc44c4b621cbf0b9070abd55066ca4d525e9174788ea7e7f304d56a0b544db4aed10b9cb1d1f88a134dac224ae7cb97513943c021465b50be84cbacc429ef93950e01d9c27600d354502cd2c7901e9d46555bfca348da2b5cf20a964fb3f9da9482d8711174b81a6a2ae668ecddeedadf3f8b927df5869d479014ce0138d67f4917a35ee185d51958e040773948f03211afaed1edcdb2ec7d27dc6e7cb62441fdd9c937808747914a1746d7ad4c227bcb55191d65a8022981687d9f7572faabcd9adcc7716c7b742e892e0526e92905d8d48cc0c896530c0d1eaf95a123bc604180ddbbd0a0526f121b48a8eb086f64d96842a1976bc75300cc845c4e1ce1d5e8f0886522eba5335b056a36d61f9ee7769c5b0789034a612eb2b11a4426dda88a048acc10cc80c10cddbfbe61ca2a108bd41e6312e011f6ce130c840285b1e46f133d7900c375f7dfe9e922e402990c1b97518b191ee9042fd9c066b88d0033a6b288ebc2915cb6370f29bf2b4bf271fba38d7ec578108144be668b374a6c32b936b865206bf09ccb72ed07c64ec47c02dd7d5cb1c63400e3fcd5605c32f65d566f030cc030eb5d832adc6365f333c90acfb4c45c5d24b290ba7c2ef82ddf6782b7169342e1c7480be44e273cc4b89b5ca802457ab7720d2812f649e8d30c9a917e9cb5a1efaf854a714d0291095116fce8cbb65977b7a9a7ce69d531c92fe70343bf2550d56dda8643212e23562958aa1ce736a90ca5915b776954cccc2f91927044dba1980c9d5cfbc5fe0e0e3a03c6b2e94125a264d9a9dba11c904bbd0ae798d4d1d27a53dd2e34c4ea316c83f94ea87f3cc0c4b413fc0aa50d3ba93742dce88dd6a2642678c87613fc8fab5f9f0bfd64d699d4766d7e3488cd307e94375e7cc890f02db1e7da8d3d018c7fd80ed91378f38ad4543b026ba8b58ce5657ff78c612de12f090973a0b38c5cb2efdd83246ae5fd8db60883ae8f0f16aec3a206dda0220053ba3bb409039d23217299a800c46b58c5188f03f3aea062a3a3617102271a72fca8445166b77dd7209f7541353886c9d91ccabf5aa6037aa186dc7bedf259c2b53b16f406328a364a79c51bb28590c643b2f5a7802d4faeff465af174fa34d119e3ada3034b335d8a628b96c731714cfd12faed59024c84fcbce45ff831ce1021cfcb8211d60679ce79cf80c0307332f39bb091deea821813dcb393f183c392db23a70b308cfbca51c7769b68c332014c2b976046361fd519940b24765d5a523677a325c91284764537f8e0e45541bbe5afa79cb7a533f179dcb75467c2195208d59bbd62a5060fe445af171f845b8ebe188049c0f9cc8ea71b518e84a8798021fff3a7dd3d4a51b7ebb65a09ddec505a8a5040ef683cd47e4d7d0061a1b0a0f8f737eea64732ce7b5f06f25f5e4a76d8e97ce81ec869b179e4183a0633da50de2eabc5d8d71ce91f78a0f37dacd24e01177121789512c4aa002a34a67e9a214c5d0ea0f0642b17b213135cf43f9075f2147d588d4293f63234ca9fe865fa5112564ba10643d1c7870136115a8ab90acaaa0185ac5f01e16895d40879fb0790d3cfa07c0b0bcb1ee6b1d29f0eaddc8b898c84945bbe9811710c5b5778f760a1b9ec6a6404295543855c5e933c38bf5af50ee7709e40e6ed341a9986284c89810a1f6c0054f980cdaa8959617727e9c0709ffda6fa21fa9ba6481551de63118087ac6f940c00d5c495c38fb5702b76bc646119d21c48bb06d761b7601a1df2b006ce8935f263c8e66f6faabf683410c7edd5666d28808fc9b109d8afb866cde096c77f8ac1f4470927ffeb94fcfb6b994d3cc934b3a6ecf90e6496c4534f61019332cf281174a11ba26d74398d7f9c41394d98a1b0f30a948cfb7cd2a6f8832232d98e1cef385b3d66f9458fe94aa4b073c1fa76e0e7e242ec44f7b988bdd770a66b85b514a9dd8f703b5d1b5b843e6586e340c0b69d003f4f074365e66100a029637b6ec806aa17bf9e15585725f52913fd7856be5ed31f2e46836a081805011b8a8fd579037f136c488ed8f41a6b8241fd47b9a143cfb43e99b8c6ba878c8122866fcd4bf724dc9f6647e17498d724be9c3d26620c77664ba92ef15d48ca1037932f9a774b243ce4204b7706902d288975b5af7f0673e09bef43399d858af1582937e87991175e55003dce1ee5f31f984196843474ffc66260dd5e44d0d470986ae9d1eb4d98887a7dd866a0185bbc63fd05db8e94cd973a8cd9eec62bee22591af7a9c0fd85d687331a37e61c8c361045613cc5b50b3b967a36171b4e9c011a7abd78318adb9399c2bc33ff323036d267e1ab1bee565766547d2f540a0071c5d1320de332961976d5c65e1bd2b5c6bd1f56ba89671c33aaac6c04ef56b56";
        console.logBytes4(stealthOwner.isValidSignature(_hash, _zkProof));
    }
}
